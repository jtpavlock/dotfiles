#+STARTUP: overview
* Package Management
** Repositories

   Define package archives.
   #+BEGIN_SRC emacs-lisp
     (require 'package)

     (setq package-archives
           '(("gnu"          . "https://elpa.gnu.org/packages/")
             ("melpa"        . "https://melpa.org/packages/")
             ("melpa-stable" . "https://stable.melpa.org/packages/")
             ("org"          . "http://orgmode.org/elpa/")))
   #+END_SRC

   Load and activate repositories.
   #+BEGIN_SRC emacs-lisp
     (package-initialize)    ; load repos
   #+END_SRC

** Package Configuration

   Always load newest version of a file. Prevents loading outdated bytecode.
   #+BEGIN_SRC emacs-lisp
     (setq load-prefer-newer t)
   #+END_SRC

*** Use Package
    /Use [[https://github.com/jwiegley/use-package][Use Package]] for tidy package configuration./

    Bootstrap.
    #+BEGIN_SRC emacs-lisp
      (unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package))
    #+END_SRC

    Reduce load time.
    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (require 'use-package))
      (require 'diminish)     ; for :diminish
      (require 'bind-key)     ; for any :bind variant
    #+END_SRC

    Install packages automatically if not present on system.
    #+BEGIN_SRC emacs-lisp
      (setq use-package-always-ensure t)
    #+END_SRC

* Appearance
** Font

  Set default font.
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'default-frame-alist
                 '(font . "DejaVu Sans Mono-12"))
  #+END_SRC

** Mode Line

   Include column in modeline.
   #+BEGIN_SRC emacs-lisp
     (setq column-number-mode t)
   #+END_SRC

   [[https://github.com/Malabarba/smart-mode-line][smart-mode-line]] for a better looking mode line.
   #+BEGIN_SRC emacs-lisp
     (use-package smart-mode-line
       :config
       (sml/setup))
   #+END_SRC

** Startup

   Don't present the startup message.
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC

   Clear the scratch buffer--default startup page.
   #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message nil)
   #+END_SRC

** Theme

   [[https://github.com/bbatsov/zenburn-emacs][Zenburn]]
   #+BEGIN_SRC emacs-lisp
     (use-package zenburn-theme
       :config
       (load-theme 'zenburn t))
   #+END_SRC

** UI

   Disable scroll bar.
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
   #+END_SRC

   Disable tool bar.
   #+BEGIN_SRC emacs-lisp
     (scroll-bar-mode -1)
   #+END_SRC

   Disable menu bar.
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
   #+END_SRC

   [[https://github.com/Fanael/relative-line-numbers][Relative Line Numbers]]
   #+BEGIN_SRC emacs-lisp
     (use-package linum-relative
       :config
       (progn
         (global-linum-mode)
         (linum-relative-toggle)
         (setq linum-relative-current-symbol "")))   ; show current line number
   #+END_SRC

** Visual Effects

   When you perform a problematic operation, flash the screen
   instead of ringing the terminal bell.
   #+BEGIN_SRC emacs-lisp
     (setq visible-bell t)
   #+END_SRC

* Key Bindings

  [[https://github.com/justbur/emacs-which-key#additional-commands][Which Key]] for helpful key binding prompts.
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :config
      (progn
        (which-key-mode)
        (setq which-key-idle-delay 0.5))    ; decrease time to display popup
                                            ; default = 1
      :diminish which-key-mode)
  #+END_SRC

*** Global Map

    [[https://github.com/noctuid/general.el][General]] to handle bindings.
    #+BEGIN_SRC emacs-lisp
      (use-package general
        :config
        (general-define-key

         ;; define "leader" key available in given states
         :states '(normal visual insert emacs motion)
         :prefix "SPC"                ; prefix for normal, visual, and motion
         :non-normal-prefix "C-SPC"   ; prefix for insert and emacs

         ;; quick commands
         "SPC"        '(execute-extended-command      :which-key "M-x")
         "TAB"        '(previous-buffer               :which-key "last buffer")
         ";"          '(shell-command                 :which-key "shell command")
         "d"          '(dired                         :which-key "dired")
         "s"          '(swiper                        :which-key "search")
         "u"          '(undo-tree-visualize           :which-key "undo tree")

         ;; buffers
         "b"          '(:ignore t                     :which-key "buffer")
         "bk"         '(kill-buffer                   :which-key "kill")
         "bs"         '(switch-to-buffer              :which-key "switch")

         ;; files
         "f"          '(:ignore t                     :which-key "file")
         "ff"         '(find-file                     :which-key "find")
         "fl"         '(counsel-locate                :which-key "locate")

         ;; help
         "h"          '(:ignore t                     :which-key "help")
         "hb"         '(describe-bindings             :which-key "describe bindings")
         "hf"         '(describe-function             :which-key "describe function")
         "hp"         '(describe-package              :which-key "describe package")
         "hv"         '(describe-variable             :which-key "describe variable")

         ;; org mode
         "o"          '(:ignore t                     :which-key "org")
         "oe"         '(org-export-dispatch           :which-key "export")
         "ol"         '(org-insert-link               :which-key "insert link")

         ;; windows
         "w"          '(:ignore t                     :which-key "window")
         "wd"         '(:ignore t                     :which-key "delete")
         "wdc"        '(delete-window                 :which-key "delete current")
         "wdo"        '(delete-other-windows          :which-key "delete other")
         "wh"         '(evil-window-left              :which-key "switch left")
         "wj"         '(evil-window-down              :which-key "switch down")
         "wk"         '(evil-window-up                :which-key "switch up")
         "wl"         '(evil-window-right             :which-key "switch right")
         "ws"         '(:ignore t                     :which-key "split")
         "wsh"        '(split-window-right            :which-key "horizontal")
         "wsv"        '(split-window-below            :which-key "vertical")))
    #+END_SRC

* Completion

  /Entails listing, sorting, filtering, previewing, and applying actions on
  selected items/

** Interface

   Ivy / Swiper / Counsel for an interactive interface. [[https://github.com/abo-abo/swiper][GitHub]] [[http://oremacs.com/swiper/][User Manual]].
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :bind
       (("C-x b" . ivy-switch-buffer))
       :config
       (progn
         (ivy-mode t)
         (setq ivy-use-virtual-buffers t)            ; add recentf & bookmarks
         (setq ivy-count-format "(%d/%d) ")
         (setq ivy-re-builders-alist                 ; allow inorder matches
               '((t . ivy--regex-ignore-order)))
         (setq ivy-initial-inputs-alist nil))        ; remove ^ from input
       :diminish ivy-mode)
   #+END_SRC

   Uses Ivy for commands.
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t                     ; so next command doesn't override default value
       :ensure smex                  ; use smex for smarter search results
       :ensure flx                   ; better fuzzy matching
       :config
       (counsel-mode)                ; remap built-in functions
       :diminish counsel-mode)
   #+END_SRC

   Uses Ivy to show an overview of search matches.
   #+BEGIN_SRC emacs-lisp
     (use-package swiper)
   #+END_SRC

** Vim

   Evil is an *e*xtensible *vi* *l*ayer. [[https://github.com/noctuid/evil-guide][Unofficial Evil Guide]] [[https://github.com/emacs-evil/evil][GitHub]] [[https://www.emacswiki.org/emacs/Evil][EmacsWiki]]
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :config
       (evil-mode t))
   #+END_SRC

   [[https://github.com/syl20bnr/evil-tutor][Evil-tutor]] for learning Evil / Vim. /remove once proficient/
   #+BEGIN_SRC emacs-lisp
     (use-package evil-tutor)
   #+END_SRC

* Documents

  /Note taking, documents, agendas, etc./

** Org

   [[http://orgmode.org/][Org Mode]] for notes, TODO lists, documents, everything else.
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :config
       (setq org-src-fontify-natively t))    ; syntax highlight in source blocks
   #+END_SRC

   [[https://github.com/emacsorphanage/org-bullets][Org Bullets]] to show pretty bullets instead of =*=.
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode t))))
   #+END_SRC

* Files
** Autosave

   Set default folder for autosave =#*#= files to =/tmp/=.
   #+BEGIN_SRC emacs-lisp
     (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
   #+END_SRC

   Auto-save every buffer that visits a file.
   #+BEGIN_SRC emacs-lisp
     (setq auto-save-default t)
   #+END_SRC

   Number of idle time before auto-save.
   Default: =30=
   #+BEGIN_SRC emacs-lisp
     (setq auto-save-timeout 20)
   #+END_SRC

   Number of keystrokes between auto-saves.
   #+BEGIN_SRC emacs-lisp
     (setq auto-save-interval 200)
   #+END_SRC

** Backup

   Set default folder for backup =~= files to =/.emacs.d/backup=
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist
           `(("." . ,(expand-file-name
                      (concat user-emacs-directory "backups")))))
   #+END_SRC

   Backup files.
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files t)
   #+END_SRC

   Backup version control files.
   #+BEGIN_SRC emacs-lisp
     (setq vc-make-backup-files t)
   #+END_SRC

   Backup by copy. Prevents deleting symlinks.
   #+BEGIN_SRC emacs-lisp
     (setq backup-by-copying t)
   #+END_SRC

   Use version control numbers for backup files.
   #+BEGIN_SRC emacs-lisp
     (setq version-control t)
   #+END_SRC

   Delete excess backup files silently.
   #+BEGIN_SRC emacs-lisp
     (setq delete-old-versions t)
   #+END_SRC

   Oldest versions to keep when a new numbered backup is made.
   #+BEGIN_SRC emacs-lisp
     (setq kept-old-versions 6)
   #+END_SRC

   Newest versions to keep when a numbered backup is made.
   #+BEGIN_SRC emacs-lisp
     (setq kept-new-versions 9)
   #+END_SRC

** Dired

   Add file sizes in human-readable units (KB, MB, etc) to dired buffers.
   #+BEGIN_SRC emacs-lisp
     (setq-default dired-listing-switches "-alh")
   #+END_SRC

** File Operations

   Delete to system trash.
   #+BEGIN_SRC emacs-lisp
     (setq delete-by-moving-to-trash t)
   #+END_SRC

   When opening a file, always follow symlinks.
   #+BEGIN_SRC emacs-lisp
     (setq vc-follow-symlinks t)
   #+END_SRC

   When something changes a file, automatically refresh the
   buffer containing that file so they can't get out of sync.
   #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode t)
   #+END_SRC

* Programming
** Comments

   [[https://github.com/redguardtoo/evil-nerd-commenter][Evil Nerd Commenter]] for commenting code.
   #+BEGIN_SRC emacs-lisp
     (use-package evil-nerd-commenter
       :config
       (evilnc-default-hotkeys))
   #+END_SRC

** COMMENT Syntax Highlighting

   Turn on syntax highlighting whenever possible.
   #+BEGIN_SRC emacs-lisp
     (global-font-lock-mode t)
   #+END_SRC

   Visually indicate matching pairs of parentheses.
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode t)
     (setq show-paren-delay 0.0)     ; remove delay
   #+END_SRC

   Add [[https://github.com/holomorph/systemd-mode][Systemd Mode]] for systemd syntax highlighting.
   #+BEGIN_SRC emacs-lisp
     (use-package systemd)
   #+END_SRC

* Text
** COMMENT Formatting

   Set =fill-column= to 80.
   #+BEGIN_SRC emacs-lisp
     (setq-default fill-column 80)
   #+END_SRC

   Highlight tabs and long lines with [[https://www.emacswiki.org/emacs/whitespace.el][whitespace]].
   #+BEGIN_SRC emacs-lisp
     (defun my-whitespace-mode ()
       "Configure 'whitespace-mode' with org compatability.
     Disables long-lines in org. "

       ;; set style
       (if (derived-mode-p 'org-mode)        ; if org mode
           (setq whitespace-style            ; then
                 '(face tabs))
         (setq whitespace-style              ; else
               '(face tabs lines-tail)))

       ;; enable mode
       (whitespace-mode t))

     (use-package whitespace
       :config
       (progn
         (setq whitespace-line-column nil)   ; use fill-column

         ;; enable for all programming and text modes
         (dolist (hook '(prog-mode-hook text-mode-hook))
           (add-hook hook #'my-whitespace-mode)))
       :diminish whitespace-mode)
   #+END_SRC

   Delete trailing whitespace everytime a buffer is saved.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC

   Don't assume that sentences should have two spaces after periods.
   #+BEGIN_SRC emacs-lisp
     (setq sentence-end-double-space nil)
   #+END_SRC

   If you save a file that doesn't end with a newline,
   automatically append one.
   #+BEGIN_SRC emacs-lisp
     (setq require-final-newline t)
   #+END_SRC

   Turn tabs into spaces.
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC

   Tab will always go to next tab stop
   #+BEGIN_SRC emacs-lisp
     (general-define-key :states '(insert emacs)
                         "TAB" 'tab-to-tab-stop)
   #+END_SRC

** Manipulation

   [[https://github.com/timcharper/evil-surround][Evil Surround]] for surrounding text in (,[,", etc.
   #+BEGIN_SRC emacs-lisp
     (use-package evil-surround
       :config
       (global-evil-surround-mode t))
   #+END_SRC

** Selection

   If some text is selected, and you type some text, delete the
   selected text and start inserting your typed text.
   #+BEGIN_SRC emacs-lisp
     (delete-selection-mode t)
   #+END_SRC

** Scrolling

   Scroll one line at a time with the keyboard.
   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 10000)
   #+END_SRC

** Undo

   Instead of treating undo/redo as a linear sequence of changes,
   [[https://www.emacswiki.org/emacs/UndoTree][Undo Tree]] treats undo history as a branching tree of changes.
   #+BEGIN_SRC emacs-lisp
          (use-package undo-tree
            :config
            (global-undo-tree-mode)
            :diminish undo-tree-mode)
   #+END_SRC

* Miscellaneous
** Optimizations

   Allow 20MB of memory (instead of 0.76MB) before calling
   garbage collection. This means GC runs less often, which speeds
   up some operations.
   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold 20000000)
   #+END_SRC

** Personal Information

   #+BEGIN_SRC emacs-lisp
     (setq user-full-name "Jacob Pavlock"
           user-mail-address "jtpavlock@gmail.com")
   #+END_SRC

** Prompt

   Don't ask `yes/no?', ask `y/n?'.
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
